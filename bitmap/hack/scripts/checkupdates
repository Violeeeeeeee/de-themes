#!/usr/bin/bash
#
#   checkupdates-ubuntu: Safely print a list of pending updates for Ubuntu.
#
#   This script is based on the original checkupdates script for Arch Linux.
#   It has been adapted for Ubuntu-based systems using apt.
#

declare -r myname='checkupdates-ubuntu'
declare -r myver='1.0.0'

# Function for printing colored messages (similar to the original script)
plain() {
    (( QUIET )) && return
    local mesg=$1; shift
    printf "${BOLD}    ${mesg}${ALL_OFF}\n" "$@" >&1
}

msg() {
    (( QUIET )) && return
    local mesg=$1; shift
    printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&1
}

msg2() {
    (( QUIET )) && return
    local mesg=$1; shift
    printf "${BLUE}  ->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&1
}

warning() {
    local mesg=$1; shift
    printf "${YELLOW}==> WARNING:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

error() {
    local mesg=$1; shift
    printf "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

# Check if messages are to be printed using color
unset ALL_OFF BOLD BLUE GREEN RED YELLOW
if [[ -t 2 && ! $USE_COLOR = "n" ]]; then
    if tput setaf 0 &>/dev/null; then
        ALL_OFF="$(tput sgr0)"
        BOLD="$(tput bold)"
        BLUE="${BOLD}$(tput setaf 4)"
        GREEN="${BOLD}$(tput setaf 2)"
        RED="${BOLD}$(tput setaf 1)"
        YELLOW="${BOLD}$(tput setaf 3)"
    else
        ALL_OFF="\e[1;0m"
        BOLD="\e[1;1m"
        BLUE="${BOLD}\e[1;34m"
        GREEN="${BOLD}\e[1;32m"
        RED="${BOLD}\e[1;31m"
        YELLOW="${BOLD}\e[1;33m"
    fi
fi
readonly ALL_OFF BOLD BLUE GREEN RED YELLOW

# Show script usage
if (( $# > 0 )); then
    echo "${myname} v${myver}"
    echo
    echo "Safely print a list of pending updates for Ubuntu."
    echo
    echo "Usage: ${myname}"
    exit 0
fi

# Check if apt is available
if ! type -P apt >/dev/null; then
    error 'Cannot find the apt binary.'
    exit 1
fi

# Check for updates and list them
msg "Fetching updates..."
sudo apt update -qq > /dev/null

if ! updates=$(apt list --upgradable 2>/dev/null | grep -v 'Listing...'); then
    error 'Cannot fetch updates.'
    exit 1
fi

if [[ -z "$updates" ]]; then
    msg "No updates available."
else
    echo "$updates"
fi

exit 0
